
clear
clc

N=20;
Dwarm=20;
Dmax=50;
precision=10^(-12);
Epsilon=10^(-8);
EpsilonMPO=10^(-8);

Jx=1;
Jy=1;
Jz=1;
h=0;
Wd=0;
NsweepsMax=8;
Gamma=0;
P=1;
g=0.1;%JC couplin
k=0.5*g;

GAMMA=zeros(N,1);
GAMMA(1)=Gamma;
GAMMA(N)=Gamma;


dtwarm=0.01;
dt=0.005;

Ndtwarm=round(4/k/dtwarm);
Ndt=round(2*k/dt);
Fid=ones(1,Ndtwarm+Ndt);
% magnetization in z-direction
OsetZ=cell(N,N);
OsetS=cell(N,N);
VsetZ=cell(1,N);
OsetCurrent=cell(N-1,N);
d=2;
dl=d^2;
sx=[0,1;1,0]; sy=[0,-1i;1i,0]; sz=[1,0;0,-1];
s=[0 0 ;1 0];
Id=eye(dl);
id=eye(d);
for j=1:N,
    VsetZ{j}=reshape(sz,1,1,dl);
    for jj=1:N,
        OsetZ{j,jj}=Id;
        OsetS{j,jj}=Id;
    end
end
for j=1:N-1
    OsetZ{j,j}=kron(id,sz);
    OsetS{j,j}=kron(id,s);
end
OsetZ{N,N}=kron(id,sz);
OsetZ{N,N}=kron(id,sz);

% starting state
mps=cell(1,N);
for j=1:N
    %state=[1; 0];
    %state=state*state';
    state=eye(d);
    state=state/(trace(state));
    state=reshape(state,dl,1);
    mps{j}=reshape(state,[1,1,dl]);
end
% %mps=createrandommps(N,Dmin,dl);
mps=prepare(mps);

hz= Wd.*(rand(N,1)-0.5)*2+h;

% time evolution
TT=[linspace(1,Ndtwarm,Ndtwarm)*dtwarm Ndtwarm*dtwarm+linspace(1,Ndt,Ndt)*dt];

for step=1:Ndtwarm
    clc
    step
    mpsi=mps;
    
    alpha=alpha+(-1i*g*St-k/2*alpha+10^(-4))*dtwarm;

    [MPO]=buildMPO(N,dl,hz,Jx,Jy,Jz,Gamma,P,g,alpha,sx,sy,sz,s,Id,id,dtwarm,Dwarm,EpsilonMPO,precision);
    mps=MpoMps(MPO,mps,N);
    [mpsSVD]=mpsTruncSvd2(mps,Dwarm,Epsilon);
    mpsSVD=prepare(mpsSVD);
    [mps]=VarCompressMPS(mps,mpsSVD,precision);
    
    
    
    Fid(step)=abs(braket(mpsi,mps))^2;
    
    [VZ,e,n]=expectationvalueTr(mps,OsetZ);
    
    Zsurf(:,step)=VZ.'/n;
end


for j=1:2:(N-1)
    
    H=Jx*kron(kron(id,sx),kron(id,sx))+Jy*kron(kron(id,sy),kron(id,sy))...
        +Jz*kron(kron(id,sz),kron(id,sz))...
        +hz(j)*kron(kron(id,sz),Id)/2+hz(j+1)*kron(Id,kron(id,sz))/2;
    LH=-1i*H;
    H=Jx*kron(kron(sx.',id),kron(sx.',id))...
        +Jy*kron(kron(sy.',id),kron(sy.',id))...
        +Jz*kron(kron(sz.',id),kron(sz.',id))...
        +hz(j)*kron(kron(sz,id),Id)/2+hz(j+1)*kron(Id,kron(sz,id))/2;
    LH=LH+1i*H;
    
    w=expm(dt*LH);
    
    if j==1
        w=expm(dt*(LH+H1+L1));
    elseif j==(N-1)
        w=expm(dt*(LH+HN+LN));
    end
    
    [U,V] = BondMPOsvd(w,dl);
    
    mpo_odd{j}=U;
    mpo_odd{j+1}=V;
    
end
for j=2:2:(N-1)
    
    H=Jx*kron(kron(id,sx),kron(id,sx))+Jy*kron(kron(id,sy),kron(id,sy))...
        +Jz*kron(kron(id,sz),kron(id,sz))...
        +hz(j)*kron(kron(id,sz),Id)/2+hz(j+1)*kron(Id,kron(id,sz))/2;
    LH=-1i*H;
    H=Jx*kron(kron(sx.',id),kron(sx.',id))...
        +Jy*kron(kron(sy.',id),kron(sy.',id))...
        +Jz*kron(kron(sz.',id),kron(sz.',id))...
        +hz(j)*kron(kron(sz,id),Id)/2+hz(j+1)*kron(Id,kron(sz,id))/2;
    LH=LH+1i*H;
    
    w=expm(dt/2*LH);
    
    if j==(N-1)
        w=expm(dt/2*(LH+HN+LN));
        
    end
    
    [U,V] = BondMPOsvd(w,dl);
    
    mpo_even{j}=U;
    mpo_even{j+1}=V;
end

MPO=Mpo2Mpo1(mpo_odd,mpo_even,N);
MPO=Mpo2Mpo1(mpo_even,MPO,N);

VMPO=VecMPO(MPO,N);

[MPO,K]=mpsTruncSvd(VMPO,Dmax,EpsilonMPO);
MPO{1}=sqrt(K)*MPO{1};

[VMPO,K]=prepare(VMPO);
VMPO{1}=sqrt(K)*VMPO{1};

[MPO]=VarCompressMPS(VMPO,MPO,precision);
MPO{1}=sqrt(K)*MPO{1};

MPO=MatMPS(MPO,N);


for step=1:Ndt
    
    clc
    step
    mpsi=mps;
    
    
    mps=MpoMps(MPO,mps,N);
    [mpsSVD]=mpsTruncSvd2(mps,Dmax,Epsilon);
    mpsSVD=prepare(mpsSVD);
    [mps]=VarCompressMPS(mps,mpsSVD,precision);
    
    %     mps=MpoMps(mpo_even,mps,N);
    %     [mpsSVD]=mpsTruncSvd2(mps,Dmax,Epsilon);
    %     mpsSVD=prepare(mpsSVD);
    %     [mps]=VarCompressMPS(mps,mpsSVD,precision);
    %
    %     mps=MpoMps(mpo_odd,mps,N);
    %     [mpsSVD]=mpsTruncSvd2(mps,Dmax,Epsilon);
    %     mpsSVD=prepare(mpsSVD);
    %     [mps]=VarCompressMPS(mps,mpsSVD,precision);
    %
    %     mps=MpoMps(mpo_even,mps,N);
    %     [mpsSVD]=mpsTruncSvd2(mps,Dmax,Epsilon);
    %     mpsSVD=prepare(mpsSVD);
    %     [mps,K]=VarCompressMPS(mps,mpsSVD,precision);
    
    Fid(Ndtwarm+step)=abs(braket(mpsi,mps))^2;
    
    
    [VZ,e,n]=expectationvalueTr(mps,OsetZ);
    
    Zsurf(:,Ndtwarm+step)=VZ.'/n;
    
end
[Vcurr,Tcur,]=expectationvalueTr(mps,OsetCurrent);
[Vcurr2,Tcur2,n]=expectationvalueTr(mps,OsetCurrent2);
current=real((Tcur-Tcur2)/(N-1)/n);
Err=imag((Tcur-Tcur2)/(N-1)/n);

%
% M=N+3*(N-2)+3+3*(N-2)+3;
% Lset=cell(M,N);
% J=[0 0; 1 0]';
%
% for m=1:M,
%     for j=1:N,
%         Lset{m,j}=Id;
%     end
% end
%
%
% for j=1:(N-1)
% Lset{N+3*(j-1)+1,j}=-1i*sqrt(Jx)*kron(id,sx);
% Lset{N+3*(j-1)+1,j+1}=sqrt(Jx)*kron(id,sx);
% Lset{N+3*(j-1)+2,j}=-1i*sqrt(Jy)*kron(id,sy);
% Lset{N+3*(j-1)+2,j+1}=sqrt(Jy)*kron(id,sy);
% Lset{N+3*(j-1)+3,j}=-1i*sqrt(Jz)*kron(id,sz);
% Lset{N+3*(j-1)+3,j+1}=sqrt(Jz)*kron(id,sz);
%
% Lset{N+3*(N-2)+3+3*(j-1)+1,j}=1i*sqrt(Jx)*kron(sx.',id);
% Lset{N+3*(N-2)+3+3*(j-1)+1,j+1}=sqrt(Jx)*kron(sx.',id);
% Lset{N+3*(N-2)+3+3*(j-1)+2,j}=1i*sqrt(Jy)*kron(sy.',id);
% Lset{N+3*(N-2)+3+3*(j-1)+2,j+1}=sqrt(Jy)*kron(sy.',id);
% Lset{N+3*(N-2)+3+3*(j-1)+3,j}=1i*sqrt(Jz)*kron(sz.',id);
% Lset{N+3*(N-2)+3+3*(j-1)+3,j+1}=sqrt(Jz)*kron(sz.',id);
%
% % Lset{N+1*(j-1)+1,j}=-1i*sqrt(Jx)*kron(id,sx);
% % Lset{N+1*(j-1)+1,j+1}=sqrt(Jx)*kron(id,sx);
% % Lset{N+1*(N-2)+1+1*(j-1)+1,j}=1i*sqrt(Jx)*kron(sx.',id);
% % Lset{N+1*(N-2)+1+1*(j-1)+1,j+1}=sqrt(Jx)*kron(sx.',id);
%
% Lset{j,j}=GAMMA(j)*(kron(conj(J),J)-1/2*(kron(id,J'*J)+kron((J'*J).',id)))...
%     -1i*hz(j)*kron(id,sz)+1i*hz(j)*kron(sz.',id);
%
% %Lset{N+1,j}=Vec0*reshape(id,1,2^2);
%
% end
% j=j+1;
% J=[0 0; 1 0];
% Lset{j,j}=GAMMA(j)*(kron(conj(J),J)-1/2*(kron(id,J'*J)+kron((J'*J).',id)))...
%      -1i*hz(j)*kron(id,sz)+1i*hz(j)*kron(sz.',id);
%
% % for j=1:(N-2)
% % Lset{N+3*(N-2)+3+3*(N-2)+3+(j-1)+1,j}=-1i*sqrt(Jx2)*kron(id,sx);
% % Lset{N+3*(N-2)+3+3*(N-2)+3+(j-1)+1,j+2}=sqrt(Jx2)*kron(id,sx);
% % Lset{N+3*(N-2)+3+3*(N-2)+3+N-2+(j-1)+1,j}=1i*sqrt(Jx2)*kron(sx.',id);
% % Lset{N+3*(N-2)+3+3*(N-2)+3+N-2+(j-1)+1,j+2}=sqrt(Jx2)*kron(sx.',id);
% % end
%
%
% % Asymptotic State
%
% [E0,mps0]=minimizeL(Lset,precision,[],mps,NsweepsMax);
%
% [VZ,e,n]=expectationvalueTr(mps0,OsetZ);
%
% [Vcurr,Tcur,]=expectationvalueTr(mps,OsetCurrent);
% [Vcurr2,Tcur2,n]=expectationvalueTr(mps,OsetCurrent2);
% current=real((Tcur-Tcur2)/(N-1)/n);
% Err=imag((Tcur-Tcur2)/(N-1)/n);



Vcurrent=[];
VErrCurrent=[];

Vcurrent=[Vcurrent current]
VErrCurrent=[VErrCurrent Err]


Vcurrent=[Vcurrent current]
VErrCurrent=[VErrCurrent ErrCurrent]

figure(2)
II=[20 26 30 36 ]
hold on
plot(II,Vcurrent,'o')
options = optimset('TolFun',1e-10,'TolFun',1e-10);
[alpha ,Dist] = fminsearch(@(alpha)ffiitt(Vcurrent,II,alpha),[-rand rand]...
    ,options);

hold on
plot(II,alpha(2)*II.^alpha(1))

[alpha ,Dist] = fminsearch(@(alpha)ffiiexp(Vcurrent,II,alpha),[-rand rand]...
    ,options);
hold on
plot(II,alpha(1).^(II*alpha(2)))

hold on
errorbar([0 0.5 1 1.5 2],Vcurrent,VErrCurrent,'o-')

plot([0 0.5 1 1.5 2 2.5 3 3.5 4],Vcurrent,'o-')
hold on
errorbar(real((Vcurr(1:N-1)-Vcurr2(1:N-1))/n),imag((Vcurr(1:N-1)-Vcurr2(1:N-1))/n),'o-')
Errcurr=std(real((Vcurr(1:N-1)-Vcurr2(1:N-1))/n))/sqrt(N-1);
Errcurr/current

figure(2)
pcolor(TT,[1:1:N],(real(Zsurf))), shading interp
pcolor((real(Zsurf))), shading interp

errorbar([1:1:N],real(Perfil),ErrPerfil,'o-')
plot([1:1:N],real(Zvec),'o-')

plot(TT,log10(1-Fid))

hold on
errorbar([0:1/(N-1):1],real(VZ.'/n),imag(VZ.'/n),'o-')
errorbar([0:1/(N-1):1],real(Zsurf(:,end)),imag(Zsurf(:,end)),'o-')
